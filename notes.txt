Pre - requesite :

- javascript
- react

- Framework for buiding native apps using js.
- native : mobile app, not web app that looks
like mobile view.

- works on ios and android 
- developed in 2015 by facebook
-  realised stable version in 2019


-- two ways to create and make a react native project

1. expo cli
2. react-native cli

-- expo cli is abstration over react-native
it provides some easy ways to do complex thing
it hides internal mess of react -native
- like we have express in react.

-- react-native cli requires to get into some
details related to native application
such as info related to ios and android application.

-- installtion steps

-- install expo globally

npm install expo-cli -g

-- Expo Client app from play Store - to see our app
in actual mobile

--extensions good to hv
1. React native tools -microsoft
2. React-native/react/redux snippets - Equimper
3. material icon theme - philip kief

-- create a project

expo init myProject

-- choose blanck managed work flow to get simple, js
based react-native

-- react native dont hv html elements like div, h1
we hv to use built in components.

-- ex; we have <view> that is same as div component
and to display text we have <text> 


--  components designed in react-native will automatically
mapped to ios and android native code.

-- To run a react native application we need native plateform
such android or ios.

-- So to run it on your PC you need native os, such as android os
, so you run android on top of windows by creating a virtual environment

-- android studio provides a way to create it, and now android os is running,
but how can you render a mobile display in pc? for that we use emulator
android studio also provides us emulator.

-- on android studio , you have to install image/os of ur choice

-- metro bundler, by bundler it means that it bundles js files into
one.

-- when we compile our code , metro bundler , bundles the js files
and sends it to either emulator, or mobile device whichever
u hv connected.

-- to refresh the application on mobile, if we are using emulator, we use
ctrl + n, and on actual mobile, u can get regfresh manu by shaking it or 
from notification bar.

-- and when using mobile device, the pc and mobile should be under same network.

-- debugging
1. with chrome
- on remote debugging, by cicking on this option ,your chrome in pc will automatically open
a 

2. with visual studio

-- public your application


-- core components in react - native

view
text
image
button
touchables
Alert


-- this are apis of react - native that we can use
-- we need to always wrap our text inside text tag
-- whatewer we have to display we can , put it inside 
view.
-- we have onPress even, that is same as click
-- we also have onLongPress event thats like  touch and
hold
-- we have to specify images with <Image/> tag only
-- here for local images

we have to do like this

<Image source ={require('./assets/favicon.png')}/>

for any network downloaded images

<Image source ={{ uri : "https://picsum.photos/200",
                        width : 200,
                        height : 200
                      }}
              blurRadius = {3}
              fadeDuration = {1000}
                      />
-- it has bunch of prperties we can use.

-- for each coponent react native has documentaion
for all of its properties

-- Image component doest work on onPress event
-- so we need to use touchables there are Few
types of it

 TouchableWithoutFeedback - normal
 TouchableOpacity - makes reduce opacity effect
 TouchableHighlight - makes dark for a moment

 -- these are cross touchables, we also have
 native components that are related to android
 or ios only.

 -- buttons 
  <Button title ="Click"
              onPress = {()=>console.log("button Clicked")
 -- Alert

 in small letters we have 

 alert();

 that makes a popup window

 <Button title ="Click Alert"
              onPress = {()=>alert("button Clicked")}
              />
-- but we can have much functionalities in it
--  react-native provides api for that

-- Alert();

 <Button title ="Click Alert API"
      onPress = {()=>Alert.alert("Surway","Are you men?",[ 
        {text : 'Yes', onPress : ()=>console.log("yes")},
        {text : 'No', onPress : ()=>console.log("yes")}
      ])
      }
-- here fist is title, then messege and array of buttons

--  we also have propmt in Alert api
<Button title ="Click Alert API"
      onPress = {()=>Alert.alert("Surway","Are you men?", text => console.log("test"))
      }/>

-- propmt , propmts user to add a text in a box

-- for styling components we use style property, we pass array of properties

style = {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
   
  }

that looks like css, but its not, its just js variables
- why we use  StyleSheet api and

const styles =  StyleSheet.create({
     container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
   
  },
  textContainer : {
    backgroundColor: 'black',
    color : 'white',
    padding : 10,
    borderRadius : 15,
    marginBottom : 20
  }
});

use it like this,
StyleSheet api validates , it any propery name is misplled,
or some error.

-- How to pass multiple styles?

style = [ styles.container, styles.textContainer]

executed from left to right, in case of same property appliied by both
right one will override left one.

-- plateform dependent code

Plateform

is react-native api, that enabales us to write
a code for specific plateform, like for android
only.

style = {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding : Plateform.OS === "android" ? 20 : 0
  }


-- StatusBar
it gives access to top bar of mobile, where we see
our network signals..,

we can get height of that

StatusBar.currentHeight

so above code can be improoved like..

padding : Plateform.OS === "android" ? 
                            StatusBar.currentHeight :
                             0


-- Density - independent  - pixels, dip

Physical Pixels = Dips * Scale Factor,

mobile uses a abstract unit for pixel, they represent
one unit of screen

ex : 320 * 850

here 1 unit equals = 2 physical pixels

so pixel u define are actualy units

actual physical pixel are given by = dip * scale Factor

, scale factor is differnt for various devise
so to keep it same for all devise , we use 
percentage.


width : "50%"

-- Dimensions api

Dimensions.get('window');
// return obj that has size of app window

Dimensions.get('screen');
// return obj that has size of entire screen


-------------------------------------------

Detecting orientation changes

-- things doest work same as we rotate our
mobile,
so we can modify app.json

"expo": {
    "name": "DoneWithIt",
    "slug": "DoneWithIt",
    "version": "1.0.0",
    ------------------------
    "orientation": "default",
    -------------------------
    },

-- we can set it to potrait, landscape, and 
to support both default

---------------------------------------------

we have hooks library for using hooks like react.
hooks are just function and by convetion it starts
from "use"

import { useDimensions } from '@react-native-community/hooks'

Dimensions api has a limitaion, so to get the updated Dimensions on changes
immediately we use useDimensionss
  console.log(useDeviceOrientation());

Object {
  "landscape": false,
  "portrait": true,  
}

3--------------------------------------------------

Flex 

similar to flex in css,
by default it lays the components in vertical

flex : 1 , takes entire available space

flexDirection
justifyContent
alignItems

we have 

alignSelf , that applies to child of flex parent

flexwrap

alignContent

flexBasis 
flexgrow
flexshrink

-- position : relative , by default

-- code snippets shortcuts

rsf - react native stateless functional components
rnss - react native style sheet

-- expo has icon pack inbuilt